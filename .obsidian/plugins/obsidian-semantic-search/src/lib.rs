mod obsidian;
mod embedding;
mod file_processor;
mod error;
mod modal;

use crate::embedding::EmbeddingRequestBuilderError;
use crate::embedding::EmbeddingRequestBuilder;

use csv::{FromUtf8Error, Writer, Reader, ReaderBuilder, StringRecord};
use embedding::EmbeddingRequest;
use embedding::EmbeddingResponse;
use error::SemanticSearchError;
use error::WrappedError;
use file_processor::FileProcessor;
use js_sys::Array;
use js_sys::JsString;
use log::{debug, error};
use ndarray::Array1;
use reqwest::header::HeaderMap;
use serde::Deserialize;
use serde::Serialize;
use wasm_bindgen::prelude::*;

use crate::embedding::EmbeddingInput;

const DATA_FILE_PATH: &str = "./input.csv";
const EMBEDDING_FILE_PATH: &str = "./embedding.csv";

#[wasm_bindgen]
pub struct PrepareCommand {
    id: JsString,
    name: JsString,
    file_processor: FileProcessor,
}

#[wasm_bindgen]
impl PrepareCommand {
    #[wasm_bindgen(getter)]
    pub fn id(&self) -> JsString {
        self.id.clone()
    }

    #[wasm_bindgen(setter)]
    pub fn set_id(&mut self, id: &str) {
        self.id = JsString::from(id)
    }

    #[wasm_bindgen(getter)]
    pub fn name(&self) -> JsString {
        self.name.clone()
    }

    #[wasm_bindgen(setter)]
    pub fn set_name(&mut self, name: &str) {
        self.name = JsString::from(name)
    }

    pub async fn callback(&self) {
        // obsidian::Notice::new(
        //     format!(
        //         "Number of markdown files: {}",
        //         self.vault.getMarkdownFiles().len()
        //     )
        //     .as_str(),
        // );
        let data = self.file_processor.generate_input().await.expect("failed to prepare input.csv");
        // TODO: only write if file does not exist/delete the file first
        match self.file_processor.write_to_path(data, DATA_FILE_PATH).await {
            Ok(()) => (),
            Err(e) => error!("{:?}", e),
        }
    }
}

#[wasm_bindgen]
pub struct GetEmbeddingsCommand {
    id: JsString,
    name: JsString,
    file_processor: FileProcessor,
    client: Client,
}

#[wasm_bindgen]
impl GetEmbeddingsCommand {
    #[wasm_bindgen(getter)]
    pub fn id(&self) -> JsString {
        self.id.clone()
    }

    #[wasm_bindgen(setter)]
    pub fn set_id(&mut self, id: &str) {
        self.id = JsString::from(id)
    }

    #[wasm_bindgen(getter)]
    pub fn name(&self) -> JsString {
        self.name.clone()
    }

    #[wasm_bindgen(setter)]
    pub fn set_name(&mut self, name: &str) {
        self.name = JsString::from(name)
    }
    pub async fn callback(&self) {
        match self.get_embeddings().await {
            Ok(()) => (),
            Err(e) => error!("{:?}", e),
        }
    }

    async fn get_embeddings(&self) -> Result<(), SemanticSearchError> {
        let input = self.file_processor.read_from_path(DATA_FILE_PATH).await?;
        let string_records = self.get_content_to_embed(input.clone())?;
        let request = self.client.create_embedding_request(string_records.into())?;
        let response = self.client.post_embedding_request(&request).await?;
        debug!("Sucessfully obtained {} embeddings", response.data.len());

        let filename_header = self.get_filename_header(input.clone())?;
        let mut wtr = csv::Writer::from_writer(vec![]);
        match request.input {
            EmbeddingInput::StringArray(arr) => {
                for (i, input) in arr.iter().enumerate() {
                    let filename_header = match filename_header.get(i) {
                        None => return Err(SemanticSearchError::GetEmbeddingsError(format!("Cannot find matching filename and header for input index {}", i))),
                        Some(filename_header) => filename_header
                    };
                    let filename = &filename_header.0;
                    let header = &filename_header.1;
                    let embedding = match &response.data.get(i) {
                        None => return Err(SemanticSearchError::GetEmbeddingsError(format!("Cannot find matching embedding for filename: {}, header: {}", filename, header))),
                        Some(embedding) => {
                            let vec: Vec<String> = embedding.embedding.clone().into_iter().map(|f| f.to_string()).collect();
                            vec.join(",")
                        }
                    };
                    wtr.write_record(&[filename, header, &embedding])?;
                }
            }
            EmbeddingInput::String(_) => unreachable!()
        }

        let data = String::from_utf8(wtr.into_inner()?)?;
        let adapter = self.file_processor.adapter();
        adapter.append(EMBEDDING_FILE_PATH.to_string(), data).await?;
        debug!("Saved embeddings to {}", EMBEDDING_FILE_PATH);
        Ok(())
    }

    fn get_content_to_embed(&self, input: String) -> Result<Vec<String>, SemanticSearchError> {
        let mut reader = ReaderBuilder::new().trim(csv::Trim::All).flexible(false)
            .from_reader(input.as_bytes());
        let records = reader.records().collect::<Result<Vec<StringRecord>, csv::Error>>()?;
        let string_records = records.iter().map(|record| {
            let mut s = format!("{}. {}", record.get(1).unwrap(), record.get(2).unwrap());
            s.truncate(MAX_TOKEN_LENGTH);
            s
        }).collect();
        Ok(string_records)
    }

    fn get_filename_header(&self, input: String) -> Result<Vec<(String, String)>, SemanticSearchError> {
        let mut reader = ReaderBuilder::new().trim(csv::Trim::All).flexible(false)
            .from_reader(input.as_bytes());
        let records = reader.records().collect::<Result<Vec<StringRecord>, csv::Error>>()?;
        let filename_header = records.iter().map(|record| 
                           (record.get(0).unwrap().to_string(), record.get(1).unwrap().to_string())
                          ).collect();
        Ok(filename_header)
    }


}

#[wasm_bindgen]
pub struct QueryCommand {
    file_processor: FileProcessor,
    client: Client,
}

#[wasm_bindgen]
impl QueryCommand {
    async fn get_similarity(&self, query: String) -> Result<Vec<Suggestions>, SemanticSearchError> {
        let mut rows = self.get_embedding_rows().await?;
        // let response = self.client.get_embedding(query.into()).await?;
        // debug!("Sucessfully obtained {} embeddings", response.data.len());
        let query_embedding: Vec<f32> = vec![0.00307189,0.0026586743,0.021397524,-0.022589123,0.0060604964,-0.00254496,-0.014901389,-0.02967465,-0.015759854,-0.03508169,0.010404065,0.013056333,-0.019539654,-0.018886197,0.008181029,0.02900838,0.018950261,0.01720771,-0.008411662,-0.010589852,-0.025446396,-0.0014350435,-0.015375466,-0.0020292413,-0.0116725415,0.025343893,0.019091204,-0.012390063,-0.0063808183,0.012313186,0.018335244,0.0104296915,-0.04540888,-0.008661512,0.0008536587,-0.014619506,0.016438937,-0.03851554,0.02041093,-0.018194301,0.01880932,0.008289939,0.0071752174,0.016554251,-0.0045485753,0.038618047,0.022409743,-0.0030366546,-0.0071495916,0.02120533,-0.016759258,0.0016448546,-0.027573336,-0.029341515,-0.0013653734,-0.0022662797,-0.025497649,0.025664216,0.034312915,-0.009347002,-0.022819754,0.014260745,-0.009686544,-0.005333365,-0.030725306,-0.008437287,0.012588663,0.00873839,-0.01960372,0.010948613,0.022781316,0.011070335,-0.007924772,0.018348057,0.0064737117,0.002327141,-0.015183273,0.019309023,-0.016374871,-0.008494945,0.00796321,-0.007995242,0.00034294496,0.00987233,0.009468725,0.0024520666,-0.017912418,0.021948477,0.008789642,-0.0013365444,0.009308564,-0.019001514,0.02262756,-0.002174988,0.018488998,0.012140212,-0.012370843,0.015362653,-0.00018598708,0.01016062,0.018553063,0.0059900256,-0.021615343,0.00024024166,-0.02639455,-0.027393956,-0.0002580596,-0.0067716115,0.022550683,-0.039412446,-0.016887387,0.011858328,0.0075019463,-0.027419582,-0.003491512,0.016272368,0.010474537,-0.0022919055,0.026830189,0.003108727,0.013825106,-0.018758068,0.028060226,-0.026112666,0.010942207,0.011236903,-0.030699681,-0.007252095,0.016695194,0.0067139533,-0.0030734916,-0.003763786,0.0039751986,0.01947559,-0.01268476,0.0027243404,0.0048849136,0.0017777883,0.009090744,-0.0044460725,0.02093626,0.00960326,-0.022384116,-0.0013677758,-0.004106531,0.029930908,0.013101178,0.0073674107,0.026420176,0.017809914,0.00036857073,0.013402281,0.0038726956,-0.0011131197,-0.0100965565,0.0063103475,-0.01756647,0.015477969,-0.019437151,-0.0044172434,0.012601476,0.011544413,0.0035075282,0.030084662,0.007758204,0.017361464,0.003145564,0.027112072,-0.004349976,0.021717846,-0.021679407,0.018168677,-0.01219787,0.005006636,0.0036548765,0.0055351676,-0.001041848,-0.0077389847,-0.022871006,-0.0222688,-0.01181989,-0.008552603,0.00940466,0.002322336,-0.03362102,0.0053109424,0.027573336,0.010698762,-0.00442365,-0.018219927,-0.0077197654,0.02182035,0.026855813,0.011083148,-0.65109974,0.001362971,0.02169222,-0.023806347,0.017822728,0.0031183367,0.021743473,0.01641331,-0.004689517,0.022742877,-0.004237863,-0.008136184,0.0023896038,-0.037183,-0.016336434,-0.010794858,-0.0063808183,-0.0014286371,-0.00893699,0.013786668,-0.009628885,-0.0026794954,-0.02023155,0.01035922,-0.008040087,0.010243905,0.00987233,-0.0058074417,-0.0074314754,0.03082781,-0.02041093,0.04312818,0.02315289,0.012761637,0.045562632,0.0038374602,-0.0043820078,0.024101043,0.0092637185,0.011185652,-0.0040584826,-0.014862951,0.014068551,-0.007527572,-0.03259599,0.02279413,0.00312154,0.008981835,-0.007867114,-0.051354058,-0.016874574,0.0058074417,0.0052468777,0.0036933152,0.016003298,0.0054166485,-0.0016784883,-0.008866519,0.0053814133,0.004856085,0.030571552,0.022422554,-0.014222306,-0.017579284,-0.022499433,0.0068548955,-0.009302157,-0.005720955,0.03974558,0.009680137,0.013453533,0.02821398,0.01605455,-0.02169222,0.0022486618,0.018245554,0.01288336,-0.028111476,-0.013504785,-0.00480163,-0.023319457,-0.0053109424,-0.03318538,-0.034671675,0.026240796,-0.00911637,0.022730064,0.0037509731,0.012332405,-0.024113856,0.014824512,0.02652268,0.010442504,-0.036260474,-0.0111344,-0.0072072498,0.016246744,-0.00538782,-0.0046350625,-0.00471194,-0.026932692,-0.011070335,0.010173433,0.006560199,0.013030708,-0.0074058496,-0.01526015,0.0121722445,0.017707411,-0.00096416986,0.0037990215,0.0145810675,0.0064833215,0.0354917,0.00002205969,-0.02217911,0.031955343,-0.0009417473,0.0021429555,-0.014517003,0.0011123188,-0.013940423,0.013466346,-0.025267016,0.0054999324,0.007713359,-0.009039493,0.0030478658,-0.01304352,0.005150781,0.0016360458,-0.0031343529,-0.012870546,0.018860571,0.0061758123,0.004266692,0.010275937,-0.028623993,-0.0021605734,-0.039719954,-0.011095962,0.012825701,0.017130831,-0.02852149,-0.022986323,-0.009122777,-0.019283397,-0.0023767909,-0.003179198,-0.0031984174,0.010487349,-0.016503,-0.024511056,0.017143644,0.020039357,-0.012210683,0.02293507,-0.02372947,-0.011518787,0.01672082,0.008283532,0.005621655,0.0041449694,-0.012761637,0.006406444,-0.0020404526,-0.010442504,0.0027243404,0.007572417,-0.009141996,0.0045069335,0.018488998,-0.013094772,0.022512246,0.0028716887,0.00259461,-0.0050867167,0.028290858,-0.0017137239,-0.029956533,0.004570998,0.016297994,-0.028239606,-0.011429097,0.030545926,0.02612548,0.029162135,-0.023268206,-0.026292047,0.0018370479,-0.013197275,0.030417798,-0.028265232,0.013556036,-0.0063519897,-0.004484511,0.019706223,-0.014619506,-0.0015791885,0.02497232,0.03500481,-0.00084885384,0.006012448,-0.013645726,0.014875763,-0.012703979,0.0028877046,-0.013709791,0.035773586,-0.013632913,0.01181989,-0.0013181259,-0.005509542,-0.02324258,-0.0119288,0.008462912,-0.020129047,0.03269849,-0.008238687,0.00087447965,0.015823917,0.021794723,0.028316483,0.01353041,-0.0040744985,0.0111344,-0.003187206,0.01871963,0.0061405767,-0.02484419,0.004929759,0.004644672,-0.007969617,0.008943397,0.002115728,0.0013565646,0.027983349,-0.01459388,0.04569076,-0.011807077,0.032134723,0.01969341,0.028726496,-0.031570956,0.02071844,0.013049927,0.0024600746,0.0107179815,-0.034902308,-0.022999134,-0.012851327,0.004743972,-0.050944045,0.007271314,0.028675245,-0.0077902363,0.033339135,-0.021256583,-0.0029165337,0.0048656943,0.010314375,0.0024568713,0.042564414,-0.015580473,-0.028393362,0.014619506,0.004926556,-0.009507163,-0.021230957,0.013210088,0.0015559652,-0.028418986,0.0068869274,-0.0021477605,0.018975887,0.03948932,0.014350435,-0.010961426,0.02116689,0.053865384,-0.03695237,0.004731159,0.010064524,0.0051860167,-0.008789642,-0.020398118,-0.029110882,-0.0010250311,-0.0009137191,-0.0038310536,-0.0015183273,0.03500481,-0.006579418,-0.024344489,0.0022422555,-0.0019411526,0.043896955,0.016490187,-0.011839109,0.021461587,0.012441315,0.022832567,-0.01884776,-0.019859977,0.032442234,0.023831973,-0.003677299,-0.0067459857,0.02235849,-0.013037114,0.0017329431,-0.028137103,-0.007284127,-0.013184463,-0.0030814996,0.0052308617,-0.0022406538,-0.00807212,0.02075688,-0.021538466,-0.010423285,0.00393676,-0.014158241,-0.01787398,0.048458345,-0.017938044,0.010199059,0.019091204,-0.0030959141,-0.0113842515,-0.04587014,0.008904957,0.002631447,-0.018604314,0.0132485265,0.010410472,0.043000054,-0.00020760883,-0.02111564,-0.0046702977,-0.0047952235,-0.022832567,-0.007091934,-0.013735416,-0.012748824,-0.008386035,-0.0011243309,0.02457512,0.0024696842,-0.0003639661,-0.018245554,0.0063840216,0.01663113,-0.0338004,0.011922393,0.011839109,0.012934611,0.004221847,-0.00836041,0.028547116,-0.002647463,-0.018386494,0.007796643,-0.012441315,0.02106439,0.015798291,0.01353041,-0.013286965,-0.001889901,-0.03713175,0.0042987242,0.028957129,0.013786668,0.02253787,0.016451748,0.0034722928,-0.02342196,0.0018674785,-0.015401092,-0.0011755825,0.020385306,-0.020564687,-0.0028108275,-0.048765853,0.0013741823,0.0015023112,0.0122939665,-0.0108397035,-0.02212786,-0.013479158,0.012140212,-0.016285181,-0.01000046,-0.02053906,-0.013850733,-0.024946693,-0.0132485265,0.0035972185,0.031468455,-0.0027771937,0.023165703,0.018078987,-0.021013137,0.03241661,0.0047503784,-0.019680597,-0.0040841084,-0.03664486,-0.00451334,0.00066466857,-0.00022262393,0.004458885,0.013889171,0.009795453,-0.016643941,0.0047215493,0.039412446,-0.007642888,-0.021897227,0.030315295,0.008789642,-0.012543818,0.028111476,-0.0062815184,-0.002416831,-0.0023575714,-0.017630534,-0.0015799893,0.018027734,0.0018290399,0.018219927,-0.011076742,-0.009103557,0.005522355,-0.0102182785,-0.039643075,0.016387684,0.014939828,0.02230724,0.024498243,0.016528627,0.010487349,-0.030494675,-0.009519977,-0.0066370764,-0.026176732,-0.0038951181,-0.0074571013,-0.007713359,0.012185057,-0.0035876087,0.0017345448,-0.0070791207,-0.007425069,0.005333365,0.03828491,0.003965589,-0.035056062,-0.0034819024,-0.00922528,-0.00097377953,0.022191923,-0.035337947,0.0004062086,-0.019616533,0.013005082,0.023127263,-0.021038763,-0.018527437,-0.02390885,-0.023191327,0.018040547,-0.012056928,0.04259004,0.0029517692,0.023191327,-0.024959506,-0.02821398,-0.00517961,-0.028162729,-0.005701735,-0.017194897,0.008245094,0.061296858,0.015208899,-0.0033761961,0.010871736,0.0017986093,0.012236308,-0.02199973,-0.013402281,-0.0018995107,-0.016515814,0.006893334,0.009827485,0.008136184,0.017848354,0.020077797,0.018963074,0.02736833,0.018617127,0.022525057,-0.028444612,-0.012992269,0.007489133,-0.017822728,-0.01605455,0.019014327,-0.013146023,-0.01845056,0.02257631,-0.0018931043,0.007553198,-0.0099299885,0.00949435,0.0032240432,0.031904094,0.0034498703,0.02271725,-0.029982159,-0.014363248,-0.029085256,0.0032416608,0.003488309,0.023357896,0.0031359545,-0.026753312,-0.0028140307,0.007053495,-0.01064751,-0.023498837,-0.0033089283,-0.017630534,-0.008578229,-0.020039357,-0.019667784,-0.021589717,-0.017194897,0.0014878967,0.010487349,-0.0119608315,0.026189543,-0.009955615,0.009539195,0.0033249445,-0.018655566,0.030469049,-0.02315289,0.042795047,0.020680003,0.005064294,-0.022499433,-0.019808726,-0.01017984,-0.009122777,0.00940466,-0.0074058496,-0.023473212,0.013504785,-0.005221252,-0.0051700007,-0.0021637764,-0.048048332,0.0036004216,0.005336568,-0.011826296,-0.008411662,0.0050482783,-0.008155404,0.017733037,0.025305456,0.0009705763,-0.0042730984,-0.012659133,-0.00900746,0.010794858,0.0029677853,0.01668238,-0.0043019275,0.015849544,-0.01889901,-0.0015671764,-0.023396334,-0.005077107,-0.0013029106,0.012146618,-0.012268341,-0.017630534,0.014440126,0.020910634,-0.020039357,-0.003504325,0.022909444,0.022781316,0.007796643,-0.039796833,0.013799481,0.010365627,-0.00028628798,0.0111344,-0.01037844,-0.0161058,-0.007328972,0.011493161,-0.012101773,0.02918776,-0.014452938,-0.030264042,-0.004375601,-0.006451289,-0.03984808,0.0007507552,0.029623399,-0.019193707,-0.023537276,-0.008674325,-0.042385034,0.02985403,0.0176946,0.0085974485,-0.002977395,0.040386226,-0.031955343,0.0044204467,0.03397978,0.026266422,-0.019988107,0.00450373,-0.0016328425,-0.029649025,0.015375466,-0.008526977,-0.028931502,-0.022768503,-0.0018114221,0.01353041,0.005884319,-0.018834947,0.023409147,0.023985727,-0.0033729929,-0.0064929314,-0.030981565,-0.004945775,-0.000037938164,-0.00045886156,0.027240202,-0.014991079,0.023255393,0.0036516732,0.0026554712,-0.00066186575,0.007284127,-0.0111344,-0.030289669,0.0028652821,-0.010801265,0.003997621,0.0028268434,0.008623074,-0.019731848,0.021000324,0.00020020138,0.0121722445,0.0025705858,-0.014529816,0.00021081205,0.022281613,-0.015913608,-0.011012678,-0.006867708,-0.01605455,-0.016656755,0.0032704899,-0.009699357,0.022781316,0.001585595,-0.012569443,-0.02533108,-0.007066308,-0.036132347,-0.018309617,-0.0068613016,0.00010460522,-0.0149142025,0.041155,-0.017489593,0.015887981,0.009308564,0.016618317,-0.013786668,0.016733631,0.0013389469,0.012921798,-0.021218143,0.0035940153,-0.049022112,-0.020167487,0.03930994,-0.028367735,0.008712764,0.03761864,-0.010999865,0.010211872,-0.011294561,0.010199059,-0.0015263354,0.025523273,0.013197275,-0.044204466,0.014555441,0.009558415,-0.03700362,-0.02670206,0.016695194,0.013210088,-0.0004500527,0.018553063,-0.009359815,-0.0420519,0.023844786,-0.015939234,-0.0021045168,0.0070983404,-0.009840298,0.0011563632,0.0429488,-0.0023928068,0.0054006325,-0.0040456695,-0.019142454,0.034389794,0.002363978,-0.027522085,-0.028393362,-0.008366816,0.017489593,-0.03925869,0.017015517,-0.00094735296,-0.020154674,-0.032903496,0.010320782,0.011717387,-0.012454128,-0.017233334,0.004657485,0.001716927,-0.0039912146,-0.020910634,0.008578229,0.018476184,0.0013325404,0.015811104,-0.0019795913,0.0057722065,-0.001700911,0.005810645,-0.016938638,0.010461723,0.17507531,-0.007354598,-0.00084404903,0.02700957,-0.009859518,0.009353409,0.006707547,0.001997209,0.014427313,0.017604908,-0.036926746,0.01614424,-0.022986323,-0.00043964223,-0.0132485265,-0.0086487,-0.034799807,-0.01295383,-0.0024696842,0.040591232,0.0053301617,-0.010807672,-0.016951451,-0.0015912006,0.02572828,0.005118749,-0.021756284,0.0105065685,0.029162135,0.0214744,-0.007732578,-0.013453533,-0.0068164566,0.010564227,-0.028265232,0.008584635,0.017053954,-0.01248616,-0.0025561713,-0.0021301426,-0.0017922028,0.00022422554,0.0041289534,-0.02320414,0.030802185,0.010653917,-0.0034242445,-0.0048528817,-0.029777152,0.0058618966,-0.009628885,-0.0117302,-0.0010194255,0.023524463,-0.008853706,-0.0017473577,-0.002021233,-0.0068420824,0.00931497,-0.0067459857,-0.0057081417,-0.004295521,-0.035876088,0.036209222,-0.01592642,0.03992496,-0.00045365634,0.029649025,0.0010842907,0.025074823,-0.01663113,0.01046813,-0.012069741,-0.002301515,0.0067267665,-0.0010658721,0.019347461,-0.00969295,0.015196086,0.03597859,-0.01659269,0.0014846935,-0.014888576,-0.009238092,0.00009199254,-0.00039579812,0.02657393,-0.00030871053,0.0007707753,0.025612963,0.0035203411,0.015785478,-0.012979456,0.0110062715,-0.0013181259,-0.0029453628,0.007226469,-0.011268935,-0.0011731801,0.00931497,0.0013141219,0.050867166,0.010583445,0.0038598827,-0.016195491,0.0051411716,-0.011102368,0.027214576,-0.0119608315,-0.010083743,-0.007982429,-0.033954155,0.035337947,-0.0077069523,0.0067972373,0.0057177516,-0.01266554,0.00393676,0.010404065,0.016400497,-0.02603579,-0.04435822,-0.009289344,-0.00026526683,-0.009366222,0.00269391,0.010231092,0.014465751,-0.01450419,-0.046203274,0.009910769,-0.011160026,0.02155128,-0.012447721,-0.0073610046,-0.03815678,0.008706357,-0.020731254,-0.028290858,0.010141402,0.016285181,-0.008757609,0.012607883,0.034236036,0.032852247,-0.017066767,0.0077517973,0.00006076112,-0.025984539,-0.016221117,-0.020910634,-0.029495269,0.014927015,-0.03251911,0.009609667,0.00093694247,-0.0033858058,-0.034979187,0.013620101,0.008808861,-0.03295475,-0.03313413,0.02652268,-0.008879332,0.0032096286,0.0025737889,-0.15939233,0.027598962,0.01326134,-0.017489593,0.019462777,0.013389468,0.021102827,0.0027611775,-0.01778429,0.012031302,-0.0009417473,-0.013325404,-0.0060316673,-0.010243905,-0.0011683753,0.00034254458,-0.008706357,0.03859242,0.016708007,-0.0020596718,0.013197275,-0.02608704,0.027240202,-0.01974466,-0.0008352402,-0.016092988,-0.017528031,0.02116689,-0.007553198,-0.035235442,-0.029341515,-0.004375601,0.046690166,-0.0040712953,0.014657944,0.008328377,-0.007425069,0.012076148,-0.0052116425,0.031724714,0.017399903,0.01902714,-0.0012260333,0.03779802,-0.005740174,-0.014055738,-0.016362058,-0.0011875946,-0.0075467913,-0.012242715,0.023178516,0.014734821,-0.015183273,0.005163594,-0.015067956,-0.015208899,-0.020462183,-0.0014158242,0.024280423,-0.013620101,-0.014030113,-0.032903496,-0.008962615,-0.007815862,-0.017284587,-0.0045774044,-0.017950857,-0.003776599,-0.0354917,-0.00024925073,-0.030648429,-0.00987233,0.021589717,-0.03034092,0.023165703,0.006406444,0.009942802,-0.0063231606,0.0057465807,0.0084308805,0.0056344676,0.023537276,-0.010045305,0.010307969,0.00033753953,-0.010794858,0.00949435,0.027291453,-0.008462912,-0.012165838,0.03544045,0.0009097151,-0.003677299,-0.040616855,0.014786073,0.0066691083,0.02142315,-0.006963805,0.012492566,-0.005451884,0.01046813,-0.0026923083,-0.015272963,0.013120398,0.020949073,0.007284127,0.008546197,0.014811699,0.041898146,0.003302522,-0.031570956,0.004385211,0.02009061,0.013761043,0.0067267665,0.0145810675,0.006912553,0.00014014097,0.02754771,0.0049585877,0.0526866,0.007598043,-0.014978266,-0.008802454,-0.018642753,-0.013312591,-0.11705855,-0.043435693,0.013338217,0.014376061,0.0024488633,-0.0067716115,-0.01796367,-0.00882808,-0.00023743884,0.058529276,-0.020974698,-0.0065121506,-0.031289075,-0.0062366733,-0.0025337487,-0.0028476645,-0.0058426773,-0.00595479,-0.011659728,0.024716062,-0.008008055,-0.025177326,-0.02444699,0.01142269,-0.016003298,-0.0016040135,-0.03216035,0.0036676894,0.00499062,-0.024946693,-0.016221117,-0.022653187,0.022896633,-0.025318267,-0.012633508,-0.0027115275,0.002701918,-0.019501217,0.02208942,-0.005695329,-0.009058712,0.033877276,0.009526382,0.010698762,0.0051667974,-0.0014614702,-0.024869816,0.020116234,-0.0090971505,-0.018437747,-0.0089754285,-0.014939828,-0.04666454,-0.00015415506,0.013940423,-0.010705168,0.0048817107,-0.0040841084,-0.015452344,-0.012844921,-0.009148402,0.016695194,-0.03610672,0.012319592,-0.016374871,-0.020193113,-0.019590907,-0.012473347,0.008014462,-0.019719036,-0.0063680056,0.026650809,0.00046686962,0.005724158,-0.028547116,0.02342196,-0.007155998,-0.003076695,0.037336756,0.035645455,-0.008494945,-0.023562903,0.025805157,-0.015759854,0.030443422,0.00049489783,0.008321971,-0.000290292,0.015337028,-0.036439855,-0.0011755825,0.019001514,0.0054294616,-0.0075660106,-0.00605409,0.00096657226,-0.015016706,0.0047375653,-0.009218873,0.006906147,-0.014606693,0.02603579,-0.036696114,0.01468357,0.0067459857,-0.012498973,0.0028716887,-0.005624858,0.010525788,-0.023088826,-0.013037114,0.010314375,0.0041193436,0.010263124,-0.024626372,-0.029239012,-0.018886197,-0.0016880981,0.017912418,0.0036740957,0.01508077,0.007803049,-0.029264638,0.0124156885,0.0412575,0.0122939665,0.0010394456,0.023255393,-0.02900838,-0.005785019,0.008840893,-0.03180159,0.017489593,-0.02005217,-0.002437652,-0.005365397,-0.0010218278,-0.023562903,-0.011320187,0.03203222,0.028957129,0.026227983,-0.0008880933,-0.025164513,-0.0000014686648,-0.0014230314,-0.01725896,-0.003289709,-0.029315889,0.014260745,0.021128453,0.016272368,0.012620695,0.003933557,0.022473807,-0.02461356,0.0044973237,0.00092893443,0.0024120263,-0.022947883,0.029982159,0.0024248392,0.022076607,0.032134723,-0.001766577,-0.0086487,-0.0033826025,-0.01623393,-0.009667324,0.0020420542,0.008616667,-0.03556858,-0.01190958,-0.02098751,0.00987233,-0.016503,0.001412621,0.041360006,0.014901389,0.0027515679,-0.0015263354,0.0055639967,0.018514624,-0.020116234,-0.017002704,-0.0035876087,0.027240202,0.017912418,-0.0049233525,-0.008078526,0.0005966001,0.009776234,-0.01592642,0.015362653,-0.0031103287,0.029956533,-0.008943397,0.0077838297,-0.010423285,0.02360134,0.011845515,0.023165703,0.007713359,-0.00016446544,-0.009238092,-0.03264724,-0.02736833,0.0065281666,-0.023588527,-0.029392766,-0.02652268,0.020218737,0.0021942072,0.033697896,0.02044937,-0.016451748,-0.0002468483,0.016464561,-0.017592097,-0.006271909,-0.0404631,0.01095502,0.0004228253,-0.003129548,-0.03185284,-0.008386035,0.005125155,-0.005439071,0.0071047465,-0.006515354,0.0008704756,-0.014978266,0.0012444519,-0.014952641,0.0031103287,-0.005019449,0.0040040277,-0.014196681,-0.0051988293,0.003779802,-0.016567064,0.061809376,0.020974698,0.010743607,0.030084662,0.0014230314,0.024241986,0.03579921,-0.0031247432,-0.011236903,-0.033877276,-0.0024328472,-0.012985863,0.008001649,-0.018732443,-0.002775592,0.026266422,-0.012370843,0.02510045,-0.024549494,-0.0135816615,0.021974104,-0.013363843,0.025497649,-0.01681051,-0.013901984,-0.02155128,0.0019908026,-0.0100965565,-0.001062669,-0.031058442,-0.0056600934,-0.0038694923,-0.028444612,-0.009577634,0.01792523,0.0005937973,0.0017313416,-0.027983349,0.021948477,0.03034092,0.01868119,0.020103423,-0.0140813645,-0.02328102,0.008514164,0.015119208,-0.025267016,-0.0070150564,-0.0008376426];
        // let query_embedding = response.data[0].clone().embedding;
        rows.sort_unstable_by(|row1, row2| cosine_similarity(query_embedding.clone(), row1.clone().2).partial_cmp(&cosine_similarity(query_embedding.to_owned(), row2.clone().2)).unwrap());
        rows.reverse();
        let ranked = rows.iter().map(|(name, header, _)| Suggestions { name: name.to_string(), header: header.to_string() }).collect();
        Ok(ranked)
    }

    async fn get_embedding_rows(&self) -> Result<Vec<(String, String, Vec<f32>)>, SemanticSearchError> {
        let input = self.file_processor.read_from_path(EMBEDDING_FILE_PATH).await?;
        let mut reader = ReaderBuilder::new().trim(csv::Trim::All).flexible(false)
            .from_reader(input.as_bytes());
        let records = reader.records().collect::<Result<Vec<StringRecord>, csv::Error>>()?;
        let rows = records.iter().map(|record| 
                           (record.get(0).unwrap().to_string(), 
                            record.get(1).unwrap().to_string(),
                            record.get(2).unwrap().to_string().split(",").map(|s| s.parse::<f32>().unwrap()).collect())
                          ).collect();
        Ok(rows)
    }
}

fn cosine_similarity(left: Vec<f32>, right: Vec<f32>) -> f32 {
    let a1  = Array1::from_vec(left);
    let a2 = Array1::from_vec(right);
    a1.dot(&a2) / a1.dot(&a1).sqrt() * a2.dot(&a2).sqrt()
}

#[derive(Deserialize, Serialize)]
pub struct Suggestions {
    name: String,
    header: String,
}

#[wasm_bindgen]
pub async fn get_suggestions(app: &obsidian::App, api_key: JsString, query: JsString) -> Result<JsValue, JsValue> {
    let query_string = query.as_string().unwrap();
    let file_processor = FileProcessor::new(app.vault());
    let client = Client::new(api_key.as_string().unwrap());
    let query_cmd = QueryCommand { file_processor, client };
    let mut ranked_suggestions = match query_cmd.get_similarity(query_string).await {
        Ok(r) => r,
        Err(e) => {
            error!("{:?}", e);
            panic!("failed to get suggestions");
        }
    };
    ranked_suggestions.truncate(10);
    Ok(serde_wasm_bindgen::to_value(&ranked_suggestions)?)
}

#[derive(Debug, Clone)]
/// Client is a container for api key, base url, organization id, and backoff
/// configuration used to make API calls.
pub struct Client {
    api_key: String,
    api_base: String,
    org_id: String,
}

/// Default v1 API base url
pub const API_BASE: &str = "https://api.openai.com/v1";
/// Name for organization header
pub const ORGANIZATION_HEADER: &str = "OpenAI-Organization";
/// Maximum token length
pub const MAX_TOKEN_LENGTH: usize = 8192;

impl Client {
    pub fn api_base(&self) -> &str {
        &self.api_base
    }

    pub fn api_key(&self) -> &str {
        &self.api_key
    }

    fn new(api_key: String) -> Self{
        Self { api_key, api_base: API_BASE.to_string(), org_id: Default::default() }
    }

    fn headers(&self) -> HeaderMap {
        let mut headers = HeaderMap::new();
        if !self.org_id.is_empty() {
            headers.insert(ORGANIZATION_HEADER, self.org_id.as_str().parse().unwrap());
        }
        headers
    }

    pub async fn get_embedding(&self, input: EmbeddingInput) -> Result<EmbeddingResponse, SemanticSearchError> {
        let request = self.create_embedding_request(input)?;
        let response = self.post_embedding_request(request).await?;
        Ok(response)
    }

    fn create_embedding_request(&self, input: EmbeddingInput) -> Result<EmbeddingRequest, SemanticSearchError> {
        let embedding_request = EmbeddingRequestBuilder::default()
            .model("text-embedding-ada-002".to_string())
            .input(input)
            .user(None)
            .build()?;
        Ok(embedding_request)
    }

    async fn post_embedding_request<I: serde::ser::Serialize>(&self, request: I) -> Result<EmbeddingResponse, SemanticSearchError> {
        let path = "/embeddings";

        let request = reqwest::Client::new()
            .post(format!("{}{path}", self.api_base()))
            .bearer_auth(self.api_key())
            .headers(self.headers())
            .json(&request)
            .build()?;

        let reqwest_client = reqwest::Client::new();
        let response = reqwest_client.execute(request).await?;

        let status = response.status();
        let bytes = response.bytes().await?;

        if !status.is_success() {
            let wrapped_error: WrappedError =
                serde_json::from_slice(bytes.as_ref()).map_err(SemanticSearchError::JSONDeserialize)?;

            return Err(SemanticSearchError::ApiError(wrapped_error.error));
        }

        let response: EmbeddingResponse =
            serde_json::from_slice(bytes.as_ref()).map_err(SemanticSearchError::JSONDeserialize)?;
        Ok(response)
    }
}

#[wasm_bindgen]
pub fn onload(plugin: &obsidian::Plugin) {
    console_log::init_with_level(log::Level::Debug).expect("");
    let preparecmd = build_prepare_cmd(plugin);
    let getembeddingscmd = build_get_embeddings_cmd(plugin);
    debug!("ApiKey: {:?}", plugin.settings().apiKey());
    plugin.addCommand(JsValue::from(preparecmd));
    plugin.addCommand(JsValue::from(getembeddingscmd))
}

fn build_prepare_cmd(plugin: &obsidian::Plugin) -> PrepareCommand {
    let file_processor = FileProcessor::new(plugin.app().vault());
    PrepareCommand {
        id: JsString::from("prepare"),
        name: JsString::from("Prepare Command"),
        file_processor
    }
}

fn build_get_embeddings_cmd(plugin: &obsidian::Plugin) -> GetEmbeddingsCommand {
    let file_processor = FileProcessor::new(plugin.app().vault());
    GetEmbeddingsCommand {
        id: JsString::from("get"),
        name: JsString::from("Get Embeddings Command"),
        file_processor,
        client: Client::new(plugin.settings().apiKey())
    }
}

#[wasm_bindgen]
pub fn yeet() -> String {
    "yeet".to_string()
}
